package controller;

import javafx.event.ActionEvent;
import javafx.scene.Node;
import javafx.scene.control.*;
import javafx.stage.Stage;
import model.InHouse;
import model.Inventory;
import model.OutSourced;
import model.Part;

import java.util.Optional;

/**
 * Controller that handles the logic for the Add Part screen based on the addpart.fxml file.
 */
public class addPart {
    /**
     * The partID variable is used to help generate unique IDs for newly created parts.
     */
    private static int partID;
    /**
     * The inout ToggleGroup groups the toggle buttons for setting In-House vs. Outsourced parts.
     */
    public ToggleGroup inout;
    /**
     * Radio button to set the part as In-House.
     */
    public RadioButton inHouse;
    /**
     * Radio button to set the part as Outsourced.
     */
    public RadioButton outsourced;
    /**
     * The partType label is the label for the text field that displays
     * Machine ID for In-House parts and Company Name for Outsourced parts.
     */
    public Label partType;
    /**
     * Text field for the part name.
     */
    public TextField partname;
    /**
     * Text field for amount of part in stock.
     */
    public TextField partstock;
    /**
     * Text field for the price of the part.
     */
    public TextField partprice;
    /**
     * Text field for minimum parts allowed in stock.
     */
    public TextField partmin;
    /**
     * Text field for maximum parts allowed in stock.
     */
    public TextField partmax;
    /**
     * Text field for the Machine ID or Company Name, depending on which part type is selected.
     */
    public TextField machinecompany;
    /**
     * Button to trigger saving the part.
     */
    public Button saveBtn;
    /**
     * Cancel button to discard changes to the form.
     */
    public Button cancelBtn;

    /**
     * Creates an alert that is used to display any error or confirmation messages
     * generated by methods within the Add Part controller.
     */
    Alert a = new Alert(Alert.AlertType.NONE);

    /**
     * Generates a unique part ID for each new part.
     *
     * @return Integer value for part ID.
     */
    public static int partID() {
        partID++;
        return partID;
    }

    /**
     * Validates user input in text fields to make sure null or invalid types
     * are not entered.
     *
     * @return Boolean b; true if input is valid, false if any of the values does not pass validation.
     */
    private boolean validateInput() {
        Boolean b = false;
        if (partname.getText() == null) {
            a.setAlertType(Alert.AlertType.ERROR);
            a.setHeaderText(null);
            a.setContentText("Part name cannot be blank.");
            a.show();
        }
        else if (inHouse.isSelected()) {
            try {
                Double.parseDouble(partprice.getText());
                Integer.parseInt(partstock.getText());
                Integer.parseInt(partmax.getText());
                Integer.parseInt(partmin.getText());
                Integer.parseInt(machinecompany.getText());
                b = true;
            } catch (NumberFormatException ignored) {
            }
        } else if (outsourced.isSelected()) {
            try {
                Double.parseDouble(partprice.getText());
                Integer.parseInt(partstock.getText());
                Integer.parseInt(partmax.getText());
                Integer.parseInt(partmin.getText());
                b = true;
            } catch (NumberFormatException ignored) {
            }

        }
        return b;
    }

    /**
     * Event handler to handle saving a new part. Runs a final check to validate minimum
     * and maximum values, then creates a new part of subclass InHouse or OutSourced based on
     * the radio button selection. Error messages will be generated if invalid input
     * is found. Closes the window on a successful save.
     *
     * @param actionEvent Used to determine the source of the triggering event so that the
     *                    related window can be closed.
     */
    public void onSave(ActionEvent actionEvent) {
        if (validateInput()) {
            if (Integer.parseInt(partstock.getText()) >= Integer.parseInt(partmin.getText()) && Integer.parseInt(partstock.getText()) <= Integer.parseInt(partmax.getText()) && Integer.parseInt(partmin.getText()) <= Integer.parseInt(partmax.getText())) {
                if (inHouse.isSelected()) {
                    Part newInhousePart = new InHouse(partID(), partname.getText(), Double.parseDouble(partprice.getText()), Integer.parseInt(partstock.getText()), Integer.parseInt(partmin.getText()), Integer.parseInt(partmax.getText()), Integer.parseInt(machinecompany.getText()));
                    Inventory.addPart(newInhousePart);
                    Stage stage = (Stage) ((Node) actionEvent.getSource()).getScene().getWindow();
                    stage.close();
                } else if (outsourced.isSelected()) {
                    Part newOutsourcedPart = new OutSourced(partID(), partname.getText(), Double.parseDouble(partprice.getText()), Integer.parseInt(partstock.getText()), Integer.parseInt(partmin.getText()), Integer.parseInt(partmax.getText()), machinecompany.getText());
                    Inventory.addPart(newOutsourcedPart);
                    Stage stage = (Stage) ((Node) actionEvent.getSource()).getScene().getWindow();
                    stage.close();
                }
            } else if (Integer.parseInt(partmin.getText()) > Integer.parseInt(partmax.getText())) {
                a.setAlertType(Alert.AlertType.ERROR);
                a.setHeaderText(null);
                a.setContentText("Minimum stock value must be lower than maximum stock value.");
                a.show();
            } else if (Integer.parseInt(partstock.getText()) < Integer.parseInt(partmin.getText())) {
                a.setAlertType(Alert.AlertType.ERROR);
                a.setHeaderText(null);
                a.setContentText("Parts in stock cannot be lower than minimum stock values.");
                a.show();
            } else if (Integer.parseInt(partstock.getText()) > Integer.parseInt(partmax.getText())) {
                a.setAlertType(Alert.AlertType.ERROR);
                a.setHeaderText(null);
                a.setContentText("Parts in stock cannot exceed maximum stock values.");
                a.show();
            }
        } else {
            a.setAlertType(Alert.AlertType.ERROR);
            a.setHeaderText(null);
            a.setContentText("Check your input and try again. Numeric fields will accept digits only; please do not use symbols or spaces.");
            a.show();
        }
    }

    /**
     * Event handler to handle a user choosing the cancel button. Provides a confirmation
     * dialog to allow the user the choice to cancel their action; if user chooses to cancel,
     * no information is removed, and if user chooses OK the information in the window is discarded
     * and the window is closed.
     *
     * @param actionEvent Used to determine the source of the triggering event so that the
     *                    related window can be closed.
     */
    public void onCancel(ActionEvent actionEvent) {
        a.setAlertType(Alert.AlertType.CONFIRMATION);
        a.setHeaderText(null);
        a.setContentText("Cancel without saving changes?");
        Optional<ButtonType> result = a.showAndWait();
        if (result.get() == ButtonType.OK) {
            Stage stage = (Stage) ((Node) actionEvent.getSource()).getScene().getWindow();
            stage.close();
        }
    }

    /**
     * Handler to change partType label when user selects the In-House radio button.
     *
     * @param actionEvent Not used.
     */
    public void onInHouse(ActionEvent actionEvent) {
        partType.setText("Machine ID");
    }

    /**
     * Handler to change partType label when user selects the Outsourced radio button.
     *
     * @param actionEvent Not used.
     */
    public void onOutsourced(ActionEvent actionEvent) {
        partType.setText("Company Name");
    }
}
